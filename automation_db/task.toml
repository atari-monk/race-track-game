[[task]]
feature = "window"
name = "simple_example"
requirements = [ "game window", "1024x768", "ability to resize", "ability to maximalize", "ability of fullscreen", "title: Racing Track", "black background", "write white text in center: test",]
context_files = [ 1,]
save_file = 1
assigned_to = "implementer"
status = "tested"

[[task]]
feature = "settings"
name = "data_model"
requirements = [ "data_class", "fullscreen bool setting",]
context_files = [ 2,]
save_file = 2
assigned_to = "implementer"
status = "tested"

[[task]]
feature = "settings"
name = "settings_crud"
requirements = [ "class with crud for toml settings", "if file not exists, create", "fullscreen bool setting", "use data model", "load, save methods", "smoke test in script",]
context_files = [ 2, 3,]
save_file = 3
assigned_to = "implementer"
status = "tested"

[[task]]
feature = "main_menu"
name = "main_menu_view"
requirements = [ "Main Menu View", "Buttons: 'Start Game', 'Settings', 'Exit'", "Use arcade.View subclass", "Select options with arrows", "run it in script __main__",]
context_files = [ 4,]
save_file = 4
assigned_to = "implementer"
status = "tested"

[[task]]
feature = "window"
name = "game_window"
requirements = [ "main game window", "integrate window and main menu", "run it in script __main__",]
context_files = [ 1, 4, 5,]
save_file = 5
assigned_to = "implementer"
status = "tested"

[[task]]
feature = "main_menu"
name = "settings_menu_view"
requirements = [ "Settings Menu View", "Buttons: 'Fullscreen', 'Back'", "Use arcade.View subclass", "Select options with arrows", "run it in script __main__", "write one class", "integrate with settings crud", "use comment where MainMenu is needed",]
context_files = [ 2, 3, 6,]
save_file = 6
assigned_to = "implementer"
status = "tested"

[[task]]
feature = "event_bus"
name = "event_bus_for_menu"
requirements = [ "create event bus class for game decoupled events system", "write it so it can be used to show two views so that they stay independant form each other",]
context_files = [ 4, 6,]
save_file = 7
assigned_to = "implementer"
status = "tested"

[[task]]
feature = "main_menu"
name = "navigation_controller"
requirements = [ "write navigation controller class to switch views", "explicit functions like go_to_main_menu(), go_to_settings() that directly control navigation", "run it in script",]
context_files = [ 4, 6,]
save_file = 8
assigned_to = "implementer"
status = "tested"

[[task]]
feature = "main_menu"
name = "navigation_for_main_view"
requirements = [ "use navigation controller in menu view",]
context_files = [ 4, 8,]
save_file = 4
assigned_to = "implementer"
status = "tested"

[[task]]
feature = "main_menu"
name = "navigation_for_settings_view"
requirements = [ "use navigation controller in menu view",]
context_files = [ 6, 8,]
save_file = 6
assigned_to = "implementer"
status = "tested"

[[task]]
feature = "main_menu"
name = "smoke_menu_navigation"
requirements = [ "write smoke test", "use navigation controller and menu views to check if menu works",]
context_files = [ 8, 4, 6,]
save_file = 9
assigned_to = "implementer"
status = "tested"

[[task]]
feature = "window"
name = "integrate_menu"
requirements = [ "use menu with navigation in main window",]
context_files = [ 5, 9, 8, 4, 6,]
save_file = 5
assigned_to = "implementer"
status = "tested"

[[task]]
feature = "main_menu"
name = "crud_di"
requirements = [ "use crud in di mode",]
context_files = [ 2, 3, 6,]
save_file = 6
assigned_to = "implementer"
status = "tested"

[[task]]
feature = "main_menu"
name = "smoke_menu_navigation fix"
requirements = [ "fix smoke test after crud is di",]
context_files = [ 2, 3, 4, 6, 8, 9,]
save_file = 9
assigned_to = "implementer"
status = "tested"

[[task]]
feature = "window"
name = "game_window_fix"
requirements = [ "crud is now in di", "fix main window", "put crud in init so it can set fullscreen",]
context_files = [ 2, 3, 4, 6, 8, 9, 5,]
save_file = 5
assigned_to = "implementer"
status = "tested"

[[task]]
feature = "window"
name = "game_view"
requirements = [ "need a game view", "green background",]
context_files = [ 5, 4,]
save_file = 10
assigned_to = "implementer"
status = "tested"

[[task]]
feature = "main_menu"
name = "game_view_navigation"
requirements = [ "need a navigation for game view", "generate factory for it", "move factories to one parameter", "update only navigation class", "Argument of type 'View | None' cannot be assigned to parameter 'new_view' of type 'View' in function 'show_view'",]
context_files = [ 8, 10,]
save_file = 8
assigned_to = "implementer"
status = "tested"

[[task]]
feature = "main_menu"
name = "new_navigation_for_main"
requirements = [ "fix view's navigation due to changes in it",]
context_files = [ 4, 8,]
save_file = 4
assigned_to = "implementer"
status = "tested"

[[task]]
feature = "main_menu"
name = "new_navigation_for_settings"
requirements = [ "fix view's navigation due to changes in it",]
context_files = [ 6, 8,]
save_file = 6
assigned_to = "implementer"
status = "tested"

[[task]]
feature = "window"
name = "game_view_integration"
requirements = [ "use new game view in main window via navigation",]
context_files = [ 5, 10, 8,]
save_file = 5
assigned_to = "implementer"
status = "tested"

[[task]]
feature = "car"
name = "simple_car_object"
requirements = [ "arcade way to do car for player", "lets render simple representation for now", "steering with arrows", "it will be generated in main window and shown in game view later",]
context_files = [ 5, 10, 11,]
save_file = 11
assigned_to = "implementer"
status = "tested"

[[task]]
feature = "window"
name = "car_in_main_window"
requirements = [ "generate car in main window and pass it to game view",]
context_files = [ 5, 10, 11,]
save_file = 5
assigned_to = "implementer"
status = "tested"

[[task]]
feature = "window"
name = "car_in_game_view"
requirements = [ "show car in game view", "get instance passed from main window",]
context_files = [ 5, 10, 11,]
save_file = 10
assigned_to = "implementer"
status = "tested"

[[task]]
feature = "track"
name = "track_object"
requirements = [ "track for cars", "elipsoid with width, a closed road to cricle on", "if point of car is outside a road it should be very slow", "need simplest method to calculate if car is outside road, what math is best of it ?",]
context_files = [ 11,]
save_file = 12
assigned_to = "implementer"
status = "tested"

[[task]]
feature = "window"
name = "track_in_main_window"
requirements = [ "generate track in main window and pass it to game view",]
context_files = [ 12, 5,]
save_file = 5
assigned_to = "implementer"
status = "tested"

[[task]]
feature = "window"
name = "track_in_game_view"
requirements = [ "show track in game view", "get instance passed from main window",]
context_files = [ 12, 5,]
save_file = 10
assigned_to = "implementer"
status = "tested"

[[task]]
feature = "track"
name = "center_track_object"
requirements = [ "make track center on screen and refresh it on resize, fullscreen and window size changes", "can we make shape of track like horizontal O", "make track fill screen",]
context_files = [ 5, 12,]
save_file = 12
assigned_to = "implementer"
status = "tested"

[[task]]
feature = "track"
name = "shape_track_object"
requirements = [ "make ellipses produce road of same width",]
context_files = [ 12,]
save_file = 12
assigned_to = "implementer"
status = "tested"

[[task]]
feature = "car"
name = "drive_model"
requirements = [ "make car length/width proportional", "use kinematic bicycle model for motion", "implement acceleration with F=ma and max speed limit", "constrain steering angle and rate", "add tire friction limits (simplified circle constraint)", "bounding box collision checks (width/length proportional)", "optional: add simple drag force (F_drag = -k * vÂ²)",]
context_files = [ 11,]
save_file = 11
assigned_to = "implementer"
status = "tested"

[[task]]
feature = "car"
name = "refactor_car"
requirements = [ "generate a dataclass model with state of car", "move all constants to data model", "generate drive model class defining behaviors of driving a car", "build it from class components like a machine would be",]
context_files = [ 11,]
save_file = 11
assigned_to = "implementer"
status = "tested"

[[task]]
feature = "car"
name = "refactor_car_physics"
requirements = [ "refacor it to smaller methods", "make it much more understandable",]
context_files = [ 15,]
save_file = 15
assigned_to = "implementer"
status = "tested"

[[task]]
feature = "car"
name = "document_car"
requirements = [ "generate md documentation explaining in detail how car works",]
context_files = [ 11, 13, 14, 15, 16, 17,]
save_file = 18
assigned_to = "implementer"
status = "tested"

[[task]]
feature = "car"
name = "document_car_physics"
requirements = [ "generate md documentation explaining class in details",]
context_files = [ 15,]
save_file = 19
assigned_to = "implementer"
status = "tested"

